name: Incremental Building Triggered By Push Events
on:
  repository_dispatch:
    types: [triggered]
jobs:
  build:
    name: Retrieve docs and deploy the website
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Print repo info
        run: |
          echo "${{ github.event.client_payload.repo }}"
          echo "${{ github.event.client_payload.ref }}"
          echo "${{ github.event.client_payload.sha }}"
          echo "${{ github.event.client_payload.download_type }}"

      # make sure there is only one workflow running
      - name: Turnstyle
        uses: softprops/turnstyle@v1

      - name: Set known_hosts
        id: know-hosts
        run: |
          echo "::set-output name=BJ_PROXY::$(ssh-keyscan -H ${{ secrets.BJ_PROXY_HOST }})"
          echo "::set-output name=LA1::$(ssh-keyscan -H ${{ secrets.LA_1_HOST }})"
          echo "::set-output name=LA2::$(ssh-keyscan -H ${{ secrets.LA_2_HOST }})"

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: |
            ${{ steps.know-hosts.outputs.BJ_PROXY }}
            ${{ steps.know-hosts.outputs.LA1 }}
            ${{ steps.know-hosts.outputs.LA2 }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
            ${{ runner.os }}-yarn-

      - name: Install deps
        run: yarn

      - name: Restore markdown contents
        uses: actions/cache@v2
        id: markdown-contents
        with:
          path: ./markdown-pages/contents/
          key: ${{ runner.os }}-markdown-new-contents-cache-${{ github.event.client_payload.sha }}
          restore-keys: |
            ${{ runner.os }}-markdown-new-contents-cache-

      # if download_type is full, download all docs
      - name: Check restore status
        if: github.event.client_payload.download_type == 'full'
        run: |
          GITHUB_AUTHORIZATION_TOKEN=${{ secrets.GH_TOKEN }} yarn download:docs-dm:all
          GITHUB_AUTHORIZATION_TOKEN=${{ secrets.GH_TOKEN }} yarn download:docs-dbaas
          GITHUB_AUTHORIZATION_TOKEN=${{ secrets.GH_TOKEN }} yarn download:docs-tidb-operator:all
          GITHUB_AUTHORIZATION_TOKEN=${{ secrets.GH_TOKEN }} yarn download:docs-tidb:en:all
          GITHUB_AUTHORIZATION_TOKEN=${{ secrets.GH_TOKEN }} yarn download:docs-tidb:zh:all
          GITHUB_AUTHORIZATION_TOKEN=${{ secrets.GH_TOKEN }} yarn download:docs-dev-guide:zh:all

      # set ref and name of the repo, which triggering website build
      - name: Split ref
        id: git-ref
        run: |
          ref=${{ github.event.client_payload.ref }}
          repo=${{ github.event.client_payload.repo }}
          echo "::set-output name=ref::${ref##*/}"
          echo "::set-output name=repo::${repo##*/}"

      # incremental download and get the base commit of the triggering repo for furthur use.
      - name: Get base commit cache
        if: github.event.client_payload.download_type != 'full' && steps.git-ref.outputs.repo != 'website-docs'
        id: cache-commit
        run: |
          path=/home/runner/work/website-docs/website-docs/markdown-pages/contents/${{ steps.git-ref.outputs.repo }}-${{ steps.git-ref.outputs.ref }}-hash.lock
          base=""
          if [ -f "$path" ];then
          base=$(cat $path)
          fi
          echo "get cache base hash: $base"
          echo "::set-output name=base::${base}"

      # incremental download the triggering repo by comparing the base and head commits
      - name: Sync docs
        if: github.event.client_payload.download_type != 'full' && steps.git-ref.outputs.repo != 'website-docs'
        run: GITHUB_AUTHORIZATION_TOKEN=${{ secrets.GH_TOKEN }} yarn sync ${{ steps.git-ref.outputs.repo }} ${{ steps.git-ref.outputs.ref }} ${{ steps.cache-commit.outputs.base }} ${{ github.event.client_payload.sha }}

      - name: Restore gatsby cache
        uses: actions/cache@v2
        id: gatsby-cache
        with:
          path: ./.cache
          key: ${{ runner.os }}-gatsby-new-cache-${{ github.event.client_payload.sha }}
          restore-keys: |
            ${{ runner.os }}-gatsby-new-cache-

      - name: Restore gatsby build
        uses: actions/cache@v2
        id: gatsby-build
        with:
          path: ./public
          key: ${{ runner.os }}-new-gatsby-build-${{ github.event.client_payload.sha }}
          restore-keys: |
            ${{ runner.os }}-new-gatsby-build-

      - name: Build website
        run: GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES=true GATSBY_ALGOLIA_APPLICATION_ID=${{ secrets.ALGOLIA_APPLICATION_ID }} GATSBY_ALGOLIA_API_KEY=${{ secrets.ALGOLIA_API_KEY }} yarn build --write-to-file

      - name: Move changed files from gatsby
        run: (yes|cp -f .cache/*Pages.txt public)|true

      - name: Deploy to LA1
        run: |
          rsync -avz --delete public/ "${{ secrets.SSH_USER }}@${{ secrets.LA_1_HOST }}:${{ secrets.DEPLOY_PATH }}"

      - name: Deploy to LA2
        run: |
          rsync -avz --delete public/ "${{ secrets.SSH_USER }}@${{ secrets.LA_2_HOST }}:${{ secrets.DEPLOY_PATH }}"

      - name: Deploy to BJ1
        run: |
          rsync -avz --delete -e 'ssh -p ${{ secrets.BJ_1_PROXY_PORT }} -o StrictHostKeyChecking=no' public/ "${{ secrets.SSH_USER }}@${{ secrets.BJ_PROXY_HOST }}:${{ secrets.DEPLOY_PATH }}"

      - name: Deploy to BJ2
        run: |
          rsync -avz --delete -e 'ssh -p ${{ secrets.BJ_2_PROXY_PORT }} -o StrictHostKeyChecking=no' public/ "${{ secrets.SSH_USER }}@${{ secrets.BJ_PROXY_HOST }}:${{ secrets.DEPLOY_PATH }}"

      # update cache commit to corresponding file
      - name: Update cache commit hash
        if: steps.git-ref.outputs.repo != 'website-docs'
        run: |
          echo "${{ github.event.client_payload.sha }}" > /home/runner/work/website-docs/website-docs/markdown-pages/contents/${{ steps.git-ref.outputs.repo }}-${{ steps.git-ref.outputs.ref }}-hash.lock

      # if does full building, store commits of all repo-refs
      - name: Update all commit hash
        if: github.event.client_payload.download_type  == 'full'
        run: |
          ls ./scripts/
          bash ./scripts/get-latest-commits.sh ${{ secrets.GH_TOKEN }}
